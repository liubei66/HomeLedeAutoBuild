#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT

name: Build_x86_64

on: 
  release:
    types: [published]

  push:
    branches: 
      - master

  schedule:
    - cron: 30 17 * * 4
  
  watch:
    types: [started]

env:
  REPO_URL: https://github.com/xiaoqingfengATGH/HomeLede
  REPO_BRANCH: master
  CONFIG_FILE: defconfig1
  DIY_SH: customize.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev patch unzip lib32gcc1 libc6-dev-i386 subversion flex node-uglify gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils  libelf-dev autoconf automake libtool autopoint device-tree-compiler libuv-dev python3.6 zlib1g-dev upx-ucl node-uglify antlr3 gperf
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean

    - name: Clone source code
      run: |
          echo "::set-env name=DATE::$(date "+%Y年%m月%d日%H时%M分")"
          useVersionInfo=$(git show -s --date=short --format="编译前的最后一次[➦主源码](https://github.com/coolsnowwolf/openwrt)更新记录:<br/>更新人: %an<br/>更新时间: %cd<br/>更新内容: %s<br/>哈希值: %H")
          echo "::set-env name=useVersionInfo::$useVersionInfo"
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          git clone https://github.com/kenzok8/openwrt-packages openwrt/package/openwrt-packages
          git clone https://github.com/kenzok8/small openwrt/package/small
          [ -e openwrt/package/lienol/luci-app-passwall/Makefile ] && echo "passwall is in package!" && rm -rf openwrt/package/lienol/luci-app-passwall
          [ -e openwrt/lienol/luci-app-passwall/Makefile ] && echo "passwall is in openwrt!" && rm -rf openwrt/lienol/luci-app-passwall
          git clone https://github.com/liubei66/luci-app-koolproxyR package/lean/luci-app-koolproxyR
          [ -e openwrt/package/updateCompileMark ] && rm -f openwrt/package/updateCompileMark
          [ -e openwrt/package/lean/default-settings/files/zzz-default-settings ] && rm -f openwrt/package/lean/default-settings/files/zzz-default-settings
          mv zzz-default-settings openwrt/package/lean/default-settings/files/zzz-default-settings
     
    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install -a
        
    - name: Prepare feeds
      run: |
          [ -e prepareCompile1.sh ] && chmod +x prepareCompile1.sh && mv prepareCompile1.sh openwrt/prepareCompile1.sh
          cd openwrt && ./prepareCompile1.sh
          sed -i '5s/#//' feeds.conf.default

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e openwrt/.config ] && rm -f openwrt/.config
        [ -e openwrt/customize.sh ] && rm -f openwrt/customize.sh
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        ./$DIY_SH
        cd openwrt
        make defconfig

    - name: Download package
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    # 云menuconfig（SSH 连接到 Actions进行menuconfig），去掉下面2行代码前面的#即可使用
    # 复制 SSH 连接命令粘贴到终端内执行，或者复制链接在浏览器中打开使用网页终端。（网页终端可能会遇到黑屏的情况，按 Ctrl + C 即可）
    # 然后输入cd openwrt && make menuconfig
    # 完成后按快捷键Ctrl+D或执行exit命令退出，后续编译工作将自动进行。
    #- name: SSH connection to Actions
     # uses: liubei66/debugger-action@master

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        make -j4 V=s

    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        echo "${{ env.useVersionInfo }}" > openwrt/bin/${{ env.DATE }}更新说明.md
        tar -zcvf bin.tar.gz openwrt/bin
        cp bin.tar.gz ./openwrt/bin/targets/x86/64/bin.tar.gz
        cd openwrt/bin/targets/*/*
        rm -rf packages
        bzip2 *.img
        echo "::set-env name=FIRMWARE::$PWD"
        echo "::set-output name=status::success"
    - name: Create release
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.DATE }} 🚀 x64稳定版 | 自动编译
        allowUpdates: true
        tag: x64稳定版
        commit: master
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          ${{ env.useVersionInfo }}
        artifacts: ${{ env.FIRMWARE }}/*
   
    - name: Upload firmware to cowtransfer #奶牛快传
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
   
    - name: Upload firmware directory
      uses: actions/upload-artifact@master
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware
        path: ${{ env.FIRMWARE }}
